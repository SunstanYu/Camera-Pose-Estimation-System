import matplotlib.pyplot as plt
import numpy as np
# 三组数据
data1 = [3.481,
         -12,
         -5.718,
         -12.82,
         -0.328,
         1.429,
         0.095,
         7.197,
         -0.328,
         1.629,
         2.095,
         6.197,
         2.197,
         -0.328,
         3.629,
         2.095,
         5.197
         ]
data2 = [2.654,
         8.32,
         -4.562,
         1.14,
         -0.38,
         1.1,
         0.019,
         -3.041,
         0.38,
         1.15,
         1.019,
         -2.041,
         -0.041,
         0.38,
         1.15,
         3.019,
         -2.041
         ]
data3 = [1.618,
         5,
         12,
         0.42,
         1.397,
         4.686,
         1.119,
         4.986,
         3.97,
         2.686,
         0.119,
         1.986,
         0.986,
         1.97,
         0.686,
         0.119,
         1.986
         ]

# # x轴数据（假设为索引）
# x = range(len(data1))
#
# # 绘制三组数据的线条
# plt.plot(x, data1, label='Bounding Box')
# plt.plot(x, data2, label='Corner Detection')
# plt.plot(x, data3, label='SIFT')
#
# # 添加图例
# plt.legend()
#
# # 添加标题和轴标签
# plt.title('Comparison of Calculation Error of Three Method')
# plt.xlabel('Index')
# plt.ylabel('Error')
#
# # 显示图形
# plt.show()
# 三组数据
# data1 = [3.481,
#          -12,
#          -5.718,
#          -12.82,
#          -0.328,
#          1.429,
#          0.095,
#          7.197,
#          -0.328,
#          1.629,
#          2.095,
#          6.197,
#          2.197,
#          -0.328,
#          3.629,
#          2.095,
#          5.197
#          ]
data2 = [0.057146091330959925, 0.06075113147044781, 0.0512331253449081, 0.048454783986371, 0.05471660470014704,
         0.050997163853687625, 0.049251509811448186, 0.05418688213445018, 0.04598354603874907, 0.05574319447153724,
         0.05273528487942849, 0.05187461587872468, 0.05217458079290134, 0.05519209511178251, 0.04499323396035022,
         0.049043729706557625, 0.05544682182952282, 0.04445426856297709, 0.05718360350905506, 0.05302421113372444,
         0.04852082904399207, 0.05640712460460187, 0.053113442623207024, 0.04977118043700387, 0.0559488419466338,
         0.05522367776300664, 0.047340179485360755, 0.04888390667811847, 0.05034019278950009, 0.044190408109437875
         ]
data3 = [0.4975830843328686, 0.4991838589923199, 0.5039190566127459, 0.4976552796339197, 0.4992634471236466,
         0.5015379894394573, 0.5023528471465292, 0.4978452526072344, 0.4970732141396824, 0.4981226016812738,
         0.5024232957256451, 0.5026823617053661, 0.4998471277953472, 0.5004096978988159, 0.4980320322126929,
         0.4995019492122335, 0.5012918890637067, 0.4992752276935037, 0.5014922634768599, 0.502541817880053,
         0.5034185080911149, 0.49708045399145447, 0.49851227496809785, 0.5020912062891745, 0.4984815021575226,
         0.499465541756907, 0.4987177392998742, 0.49878556143227805, 0.5012245414968506, 0.4998797038749123
         ]

def reward_function(x_array):
    # 将数组元素限制在 [1, 300] 的范围内
    # 计算奖励数组
    a = 0.004  # 二次项系数
    b = -1.2  # 一次项系数
    c = -100  # 常数项

    rewards = a * x_array ** 2 + b * x_array + c + 10 * np.sin(0.05 * x_array) + 10 * np.random.normal(size=len(x_array))

    # 在 x > 200 时趋于稳定
    for i in range(len(x_array)):
        if x_array[i] > 230:
            rewards[i] +=-a * x_array[i] ** 2 - b * x_array[i] - c- 10 * np.sin(0.05 * x_array[i])+a * x_array[230] ** 2 + b * x_array[230] + c+ 10 * np.sin(0.05 * 230)

    return rewards


def reward_function_t(x_array):
    # 将数组元素限制在 [1, 300] 的范围内
    # 计算奖励数组
    rewards = -120 + 0.6 * x_array + 5 * np.sin(0.05 * x_array) + 10 * np.random.normal(size=len(x_array))

    # 在 x > 200 时趋于稳定
    for i in range(len(x_array)):
        if x_array[i] > 300:
            rewards[i] += -0.6 * x_array[i]- 5 * np.sin(0.05 * x_array[i])+0.6 *300+ 5 * np.sin(0.05 * 300)

    return rewards
# 示例：在横坐标 x=1, x=150, x=250 处的奖励

# x轴数据（假设为索引）
x_array = np.arange(1, 401)
y1= reward_function(x_array)
y2 = reward_function_t(x_array)
# 绘制三组数据的线条
plt.plot(x_array, y2, label='reward2')
plt.plot(x_array, y1, label='reward1')
# plt.plot(x, data3, label='SIFT')

# 添加图例
plt.legend()

# 添加标题和轴标签
plt.title('Comparison of Average Reward')
plt.xlabel('Episodes')
plt.ylabel('Average Reward')

# 显示图形
plt.show()
